import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from scipy.interpolate import griddata
from scipy.optimize import fsolve
from multiprocessing import Pool, cpu_count
from numba import njit

@njit
def F(x, beta, rho):
    # Core map function defining the dynamical system's evolution
    if rho == 0:
        rho = 1e-10  # Avoid division by zero
    new_x = x[0] + beta * x[0] * (1 - 2 * x[0] - (x[0] + (2 / rho) * x[4]))
    new_y = max(0, 1 / 2 - (rho / 2) * x[3])
    new_xt_1 = x[0]
    new_xt_2 = x[2]
    new_yt_1 = x[1]
    if np.abs(new_x) > 1e5 or np.abs(new_y) > 1e5:
        return np.array([np.nan, np.nan, np.nan, np.nan, np.nan])
    return np.array([new_x, new_y, new_xt_1, new_xt_2, new_yt_1])

@njit
def check_periodicity(sol, Num, eps):
    # Check if the solution has periodicity within a given tolerance
    for period in range(1, Num):
        is_periodic = True
        for k in range(Num - period):
            if np.linalg.norm(sol[k] - sol[k + period]) > eps:
                is_periodic = False
                break
        if is_periodic:
            return period
    return Num

@njit
def per(beta0, rho0, Num=16, trans=6000, eps=1e-5):
    # Evaluate the periodicity of the map after transient steps
    beta, rho = beta0, rho0
    Q0 = np.array([((2 - 2 / rho) / 4) + np.random.uniform(-1e-5, 1e-5),
                   ((3 - rho) / 4) + np.random.uniform(-1e-5, 1e-5),
                   ((2 - 2 / rho) / 4) + np.random.uniform(-1e-5, 1e-5),
                   ((2 - 2 / rho) / 4) + np.random.uniform(-1e-5, 1e-5),
                   ((3 - rho) / 4) + np.random.uniform(-1e-5, 1e-5)])
    Q1 = Q0
    for _ in range(trans):  # Transient iterations
        Q1 = F(Q1, beta, rho)
        if np.any(np.isnan(Q1)):
            return 16  # Return max if unstable
        if np.linalg.norm(Q1) >= 100:
            break
    if np.linalg.norm(Q1) <= 1000:
        sol = np.zeros((Num + 1, 5))
        sol[0] = Q1
        for i in range(1, Num + 1):
            sol[i] = F(sol[i - 1], beta, rho)
            if np.any(np.isnan(sol[i])):
                return 16
        return check_periodicity(sol, Num, eps)
    return Num

def compute_per_pair(args):
    # Helper for parallel processing: compute periodicity for (rho, beta)
    rho, beta = args
    return per(beta, rho)

def parallel_per_computation(rho_values, beta_values, num_processes=None):
    # Perform parallel computation of periodicity over parameter grid
    if num_processes is None:
        num_processes = cpu_count()
    rho_beta_pairs = [(rho_values[i], beta_values[j]) for i in range(len(rho_values)) for j in range(len(beta_values))]
    with Pool(processes=num_processes) as pool:
        result = pool.map(compute_per_pair, rho_beta_pairs)
    Z = np.array(result).reshape(len(beta_values), len(rho_values)).T
    return Z

def solve_phi(a_abs, tau):
    # Solve transcendental equation to find phi for given a_abs and tau
    def f(phi):
        return np.sin(tau * phi) / np.sin((tau + 1) * phi) - 1 / a_abs
    phi_guess = np.pi / (2 * (tau + 1))
    phi_root = fsolve(f, phi_guess)
    return phi_root[0]

def F_beta(beta, x_plus, n, m, tau):
    # Function used to solve for tilde_beta (β̃) based on system parameters
    a = 1 - (n + 2) * beta * x_plus
    a_abs = abs(a)
    phi = solve_phi(a_abs, tau)
    rhs = np.sqrt(a**2 + 1 - 2 * a_abs * np.cos(phi))
    return (n * m * beta * x_plus) / 2 - rhs

def compute_tilde_beta_tau(x_plus, n, m, tau):
    # Solve for β̃ using nonlinear root-finding
    beta_guess = (2 + 1 / tau) / ((n + 2) * x_plus)
    beta_root = fsolve(F_beta, beta_guess, args=(x_plus, n, m, tau))
    if np.isfinite(beta_root[0]):
        return beta_root[0]
    else:
        return np.inf

def beta_of_rho(rho, n, m, tau):
    # Compute the curve beta = f(rho) based on constraints
    denominator = 2 * (n + 2) - n * m
    x_plus = (2 - m / rho) / denominator
    f1 = 4 / ((-n * m + 2 * n + 4) * x_plus)
    f2 = (2 + 1 / tau) / ((n + 2) * x_plus)
    beta_tilde = compute_tilde_beta_tau(x_plus, n, m, tau)
    valid_values = list(filter(np.isfinite, [f1, f2, beta_tilde]))
    if valid_values:
        return min(valid_values)
    else:
        return np.inf

if __name__ == '__main__':
    # Set up parameter grid
    rho_values = np.linspace(1, 3, 200)
    beta_values = np.linspace(0, 4, 200)
    R, B = np.meshgrid(rho_values, beta_values)

    # Run the periodicity computation in parallel
    Z = parallel_per_computation(rho_values, beta_values)

    # Interpolate data for smoother contour plot
    rho_fine = np.linspace(rho_values.min(), rho_values.max(), 4000)
    beta_fine = np.linspace(beta_values.min(), beta_values.max(), 4000)
    R_fine, B_fine = np.meshgrid(rho_fine, beta_fine)
    Z_fine = griddata((R.flatten(), B.flatten()), Z.flatten(), (R_fine, B_fine), method='cubic')

    # Plotting the periodicity diagram
    cmap = ListedColormap(list(plt.cm.tab20.colors[:16]))
    plt.figure(figsize=(10, 8))
    contour = plt.contourf(R_fine, B_fine, Z_fine, levels=np.arange(1, 17), cmap=cmap)
    plt.colorbar(contour)

    # Plot critical curve beta = f(rho)
    beta_curve = [beta_of_rho(rho, 1, 2, 4) for rho in rho_values]
    plt.plot(rho_values, beta_curve, 'k-', linewidth=4, zorder=10)

    # Labels and styling
    plt.xlabel(r'$\boldsymbol{\rho}$', fontsize=13, fontweight='bold')
    plt.ylabel(r'$\boldsymbol{\beta}$', fontsize=13, fontweight='bold')
    plt.ylim(0, 4)
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)
    plt.xlim(rho_values.min(), rho_values.max())
    plt.ylim(0, 4)
    plt.show()






